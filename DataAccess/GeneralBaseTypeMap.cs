// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace DebugMode
{

    // GeneralBaseType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class GeneralBaseTypeMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GeneralBaseType>
    {
        public GeneralBaseTypeMap()
            : this("dbo")
        {
        }

        public GeneralBaseTypeMap(string schema)
        {
            ToTable("GeneralBaseType", schema);
            Property(x => x.GeneralBaseTypeId).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.GeneralBaseCategoryId).HasColumnName(@"GeneralBaseCategoryId").HasColumnType("int");
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar");
            Property(x => x.Titile).HasColumnName(@"Titile").HasColumnType("nvarchar");
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.GeneralBaseCategory).WithMany(b => b.GeneralBaseTypes).HasForeignKey(c => c.GeneralBaseCategoryId).WillCascadeOnDelete(false); // FK_GeneralBaseType_GeneralBaseCategory
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
