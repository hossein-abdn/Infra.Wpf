// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace DataAccess
{

    // Permission
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class PermissionMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Permission>
    {
        public PermissionMap()
            : this("dbo")
        {
        }

        public PermissionMap(string schema)
        {
            ToTable("Permission", schema);
            Property(x => x.PermissionId).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar");
            Property(x => x.Uri).HasColumnName(@"Uri").HasColumnType("nvarchar(max)");
            Property(x => x.PermitionTypeId).HasColumnName(@"PermitionTypeId").HasColumnType("int");
            Property(x => x.ParentPermissionId).HasColumnName(@"ParentPermissionId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.ParentPermission).WithMany(b => b.Permissions).HasForeignKey(c => c.ParentPermissionId).WillCascadeOnDelete(false); // FK_Permission_Permission
            HasRequired(a => a.GeneralBaseType).WithMany(b => b.Permissions).HasForeignKey(c => c.PermitionTypeId).WillCascadeOnDelete(false); // FK_Permission_GeneralBaseType
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
