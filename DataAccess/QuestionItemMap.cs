// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace DataAccess
{

    // QuestionItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class QuestionItemMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionItem>
    {
        public QuestionItemMap()
            : this("dbo")
        {
        }

        public QuestionItemMap(string schema)
        {
            ToTable("QuestionItem", schema);
            Property(x => x.QuestionItemId).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.QuestionId).HasColumnName(@"QuestionId").HasColumnType("int");
            Property(x => x.Turn).HasColumnName(@"Turn").HasColumnType("int");
            Property(x => x.QuestionTypeId).HasColumnName(@"QuestionTypeId").HasColumnType("int");
            Property(x => x.Text).HasColumnName(@"Text").HasColumnType("nvarchar").IsOptional();
            Property(x => x.CharacterNumber).HasColumnName(@"CharacterNumber").HasColumnType("int").IsOptional();
            Property(x => x.AnswerTypeId).HasColumnName(@"AnswerTypeId").HasColumnType("int").IsOptional();
            Property(x => x.RecordStatusId).HasColumnName(@"RecordStatusId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.AnswerType).WithMany(b => b.AnswerType).HasForeignKey(c => c.AnswerTypeId).WillCascadeOnDelete(false); // FK_QuestionItem_GeneralBaseType1
            HasOptional(a => a.RecordStatus).WithMany(b => b.QuestionItems_RecordStatusId).HasForeignKey(c => c.RecordStatusId).WillCascadeOnDelete(false); // FK_QuestionItem_GeneralBaseType2
            HasRequired(a => a.Question).WithMany(b => b.QuestionItems).HasForeignKey(c => c.QuestionId).WillCascadeOnDelete(false); // FK_QuestionItem_Question
            HasRequired(a => a.QuestionType).WithMany(b => b.QuestionType).HasForeignKey(c => c.QuestionTypeId).WillCascadeOnDelete(false); // FK_QuestionItem_GeneralBaseType
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
