// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace DataAccess.Models
{
    using DataAccess.Mappings;


    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.29.1.0")]
    public class FBSDBContext : System.Data.Entity.DbContext, IFBSDBContext
    {
        public System.Data.Entity.DbSet<Account> Accounts { get; set; } // Account
        public System.Data.Entity.DbSet<AccountDetail> AccountDetails { get; set; } // AccountDetail
        public System.Data.Entity.DbSet<Award> Awards { get; set; } // Award
        public System.Data.Entity.DbSet<AwardConfig> AwardConfigs { get; set; } // AwardConfig
        public System.Data.Entity.DbSet<AwardScore> AwardScores { get; set; } // AwardScore
        public System.Data.Entity.DbSet<Camp> Camps { get; set; } // Camp
        public System.Data.Entity.DbSet<Class> Classes { get; set; } // Class
        public System.Data.Entity.DbSet<ClassPoint> ClassPoints { get; set; } // ClassPoint
        public System.Data.Entity.DbSet<ClassScadule> ClassScadules { get; set; } // ClassScadule
        public System.Data.Entity.DbSet<ClassScore> ClassScores { get; set; } // ClassScore
        public System.Data.Entity.DbSet<ClassSession> ClassSessions { get; set; } // ClassSession
        public System.Data.Entity.DbSet<Document> Documents { get; set; } // Document
        public System.Data.Entity.DbSet<DocumentTag> DocumentTags { get; set; } // DocumentTag
        public System.Data.Entity.DbSet<Exam> Exams { get; set; } // Exam
        public System.Data.Entity.DbSet<Festival> Festivals { get; set; } // Festival
        public System.Data.Entity.DbSet<GeneralBaseCategory> GeneralBaseCategories { get; set; } // GeneralBaseCategory
        public System.Data.Entity.DbSet<GeneralBaseType> GeneralBaseTypes { get; set; } // GeneralBaseType
        public System.Data.Entity.DbSet<Group> Groups { get; set; } // Group
        public System.Data.Entity.DbSet<GroupStudent> GroupStudents { get; set; } // GroupStudent
        public System.Data.Entity.DbSet<Parent> Parents { get; set; } // Parent
        public System.Data.Entity.DbSet<Permission> Permissions { get; set; } // Permission
        public System.Data.Entity.DbSet<PhoneNumber> PhoneNumbers { get; set; } // PhoneNumber
        public System.Data.Entity.DbSet<Place> Places { get; set; } // Place
        public System.Data.Entity.DbSet<Question> Questions { get; set; } // Question
        public System.Data.Entity.DbSet<QuestionItem> QuestionItems { get; set; } // QuestionItem
        public System.Data.Entity.DbSet<RankConfig> RankConfigs { get; set; } // RankConfig
        public System.Data.Entity.DbSet<Register> Registers { get; set; } // Register
        public System.Data.Entity.DbSet<RegisterQuestion> RegisterQuestions { get; set; } // RegisterQuestion
        public System.Data.Entity.DbSet<ReligiousMission> ReligiousMissions { get; set; } // ReligiousMission
        public System.Data.Entity.DbSet<Role> Roles { get; set; } // Role
        public System.Data.Entity.DbSet<RolePermission> RolePermissions { get; set; } // RolePermission
        public System.Data.Entity.DbSet<RollCall> RollCalls { get; set; } // RollCall
        public System.Data.Entity.DbSet<Score> Scores { get; set; } // Score
        public System.Data.Entity.DbSet<ScoreItem> ScoreItems { get; set; } // ScoreItem
        public System.Data.Entity.DbSet<Student> Students { get; set; } // Student
        public System.Data.Entity.DbSet<StudentAward> StudentAwards { get; set; } // StudentAward
        public System.Data.Entity.DbSet<StudentClass> StudentClasses { get; set; } // StudentClass
        public System.Data.Entity.DbSet<StudentExam> StudentExams { get; set; } // StudentExam
        public System.Data.Entity.DbSet<StudentPersonality> StudentPersonalities { get; set; } // StudentPersonality
        public System.Data.Entity.DbSet<Tag> Tags { get; set; } // Tag
        public System.Data.Entity.DbSet<Teacher> Teachers { get; set; } // Teacher
        public System.Data.Entity.DbSet<Term> Terms { get; set; } // Term
        public System.Data.Entity.DbSet<TermQuestion> TermQuestions { get; set; } // TermQuestion
        public System.Data.Entity.DbSet<User> Users { get; set; } // User
        public System.Data.Entity.DbSet<UserPermission> UserPermissions { get; set; } // UserPermission
        public System.Data.Entity.DbSet<WorkBook> WorkBooks { get; set; } // WorkBook

        static FBSDBContext()
        {
            System.Data.Entity.Database.SetInitializer<FBSDBContext>(null);
        }

        public FBSDBContext()
            : base("Name=FBSDBContext")
        {
        }

        public FBSDBContext(string connectionString)
            : base(connectionString)
        {
        }

        public FBSDBContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public FBSDBContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public FBSDBContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AccountMap());
            modelBuilder.Configurations.Add(new AccountDetailMap());
            modelBuilder.Configurations.Add(new AwardMap());
            modelBuilder.Configurations.Add(new AwardConfigMap());
            modelBuilder.Configurations.Add(new AwardScoreMap());
            modelBuilder.Configurations.Add(new CampMap());
            modelBuilder.Configurations.Add(new ClassMap());
            modelBuilder.Configurations.Add(new ClassPointMap());
            modelBuilder.Configurations.Add(new ClassScaduleMap());
            modelBuilder.Configurations.Add(new ClassScoreMap());
            modelBuilder.Configurations.Add(new ClassSessionMap());
            modelBuilder.Configurations.Add(new DocumentMap());
            modelBuilder.Configurations.Add(new DocumentTagMap());
            modelBuilder.Configurations.Add(new ExamMap());
            modelBuilder.Configurations.Add(new FestivalMap());
            modelBuilder.Configurations.Add(new GeneralBaseCategoryMap());
            modelBuilder.Configurations.Add(new GeneralBaseTypeMap());
            modelBuilder.Configurations.Add(new GroupMap());
            modelBuilder.Configurations.Add(new GroupStudentMap());
            modelBuilder.Configurations.Add(new ParentMap());
            modelBuilder.Configurations.Add(new PermissionMap());
            modelBuilder.Configurations.Add(new PhoneNumberMap());
            modelBuilder.Configurations.Add(new PlaceMap());
            modelBuilder.Configurations.Add(new QuestionMap());
            modelBuilder.Configurations.Add(new QuestionItemMap());
            modelBuilder.Configurations.Add(new RankConfigMap());
            modelBuilder.Configurations.Add(new RegisterMap());
            modelBuilder.Configurations.Add(new RegisterQuestionMap());
            modelBuilder.Configurations.Add(new ReligiousMissionMap());
            modelBuilder.Configurations.Add(new RoleMap());
            modelBuilder.Configurations.Add(new RolePermissionMap());
            modelBuilder.Configurations.Add(new RollCallMap());
            modelBuilder.Configurations.Add(new ScoreMap());
            modelBuilder.Configurations.Add(new ScoreItemMap());
            modelBuilder.Configurations.Add(new StudentMap());
            modelBuilder.Configurations.Add(new StudentAwardMap());
            modelBuilder.Configurations.Add(new StudentClassMap());
            modelBuilder.Configurations.Add(new StudentExamMap());
            modelBuilder.Configurations.Add(new StudentPersonalityMap());
            modelBuilder.Configurations.Add(new TagMap());
            modelBuilder.Configurations.Add(new TeacherMap());
            modelBuilder.Configurations.Add(new TermMap());
            modelBuilder.Configurations.Add(new TermQuestionMap());
            modelBuilder.Configurations.Add(new UserMap());
            modelBuilder.Configurations.Add(new UserPermissionMap());
            modelBuilder.Configurations.Add(new WorkBookMap());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AccountMap(schema));
            modelBuilder.Configurations.Add(new AccountDetailMap(schema));
            modelBuilder.Configurations.Add(new AwardMap(schema));
            modelBuilder.Configurations.Add(new AwardConfigMap(schema));
            modelBuilder.Configurations.Add(new AwardScoreMap(schema));
            modelBuilder.Configurations.Add(new CampMap(schema));
            modelBuilder.Configurations.Add(new ClassMap(schema));
            modelBuilder.Configurations.Add(new ClassPointMap(schema));
            modelBuilder.Configurations.Add(new ClassScaduleMap(schema));
            modelBuilder.Configurations.Add(new ClassScoreMap(schema));
            modelBuilder.Configurations.Add(new ClassSessionMap(schema));
            modelBuilder.Configurations.Add(new DocumentMap(schema));
            modelBuilder.Configurations.Add(new DocumentTagMap(schema));
            modelBuilder.Configurations.Add(new ExamMap(schema));
            modelBuilder.Configurations.Add(new FestivalMap(schema));
            modelBuilder.Configurations.Add(new GeneralBaseCategoryMap(schema));
            modelBuilder.Configurations.Add(new GeneralBaseTypeMap(schema));
            modelBuilder.Configurations.Add(new GroupMap(schema));
            modelBuilder.Configurations.Add(new GroupStudentMap(schema));
            modelBuilder.Configurations.Add(new ParentMap(schema));
            modelBuilder.Configurations.Add(new PermissionMap(schema));
            modelBuilder.Configurations.Add(new PhoneNumberMap(schema));
            modelBuilder.Configurations.Add(new PlaceMap(schema));
            modelBuilder.Configurations.Add(new QuestionMap(schema));
            modelBuilder.Configurations.Add(new QuestionItemMap(schema));
            modelBuilder.Configurations.Add(new RankConfigMap(schema));
            modelBuilder.Configurations.Add(new RegisterMap(schema));
            modelBuilder.Configurations.Add(new RegisterQuestionMap(schema));
            modelBuilder.Configurations.Add(new ReligiousMissionMap(schema));
            modelBuilder.Configurations.Add(new RoleMap(schema));
            modelBuilder.Configurations.Add(new RolePermissionMap(schema));
            modelBuilder.Configurations.Add(new RollCallMap(schema));
            modelBuilder.Configurations.Add(new ScoreMap(schema));
            modelBuilder.Configurations.Add(new ScoreItemMap(schema));
            modelBuilder.Configurations.Add(new StudentMap(schema));
            modelBuilder.Configurations.Add(new StudentAwardMap(schema));
            modelBuilder.Configurations.Add(new StudentClassMap(schema));
            modelBuilder.Configurations.Add(new StudentExamMap(schema));
            modelBuilder.Configurations.Add(new StudentPersonalityMap(schema));
            modelBuilder.Configurations.Add(new TagMap(schema));
            modelBuilder.Configurations.Add(new TeacherMap(schema));
            modelBuilder.Configurations.Add(new TermMap(schema));
            modelBuilder.Configurations.Add(new TermQuestionMap(schema));
            modelBuilder.Configurations.Add(new UserMap(schema));
            modelBuilder.Configurations.Add(new UserPermissionMap(schema));
            modelBuilder.Configurations.Add(new WorkBookMap(schema));
            return modelBuilder;
        }
    }
}
// </auto-generated>
