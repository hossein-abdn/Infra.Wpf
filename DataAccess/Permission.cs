// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace DebugMode
{

    // Permission
    ///<summary>
    /// جدول دسترسی ها
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class Permission
    {
        [Column(@"PermissionId", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Permission ID")]
        public int PermissionId { get; set; } // PermissionId (Primary key)

        ///<summary>
        /// عنوان دسترسی
        ///</summary>
        [Required]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 50)

        ///<summary>
        /// آدرس دسترسی
        ///</summary>
        [Required]
        [Display(Name = "Uri")]
        public string Uri { get; set; } // Uri

        ///<summary>
        /// نوع دسترسی (فرم، دکمه، کلاس)
        ///</summary>
        [Required]
        [Display(Name = "Permition type ID")]
        public int PermitionTypeId { get; set; } // PermitionTypeId

        [Display(Name = "Parent permission ID")]
        public int? ParentPermissionId { get; set; } // ParentPermissionId

        // Reverse navigation

        /// <summary>
        /// Child Permissions where [Permission].[ParentPermissionId] point to this entity (FK_Permission_Permission)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Permission> Permissions { get; set; } // Permission.FK_Permission_Permission
        /// <summary>
        /// Child RolePermissions where [RolePermission].[PermissionId] point to this entity (FK_RolePermission_Permission)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RolePermission> RolePermissions { get; set; } // RolePermission.FK_RolePermission_Permission
        /// <summary>
        /// Child UserPermissions where [UserPermission].[PermissionId] point to this entity (FK_UserPermission_Permission)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<UserPermission> UserPermissions { get; set; } // UserPermission.FK_UserPermission_Permission

        // Foreign keys

        /// <summary>
        /// Parent GeneralBaseType pointed by [Permission].([PermitionTypeId]) (FK_Permission_GeneralBaseType)
        /// </summary>
        public virtual GeneralBaseType GeneralBaseType { get; set; } // FK_Permission_GeneralBaseType

        /// <summary>
        /// Parent Permission pointed by [Permission].([ParentPermissionId]) (FK_Permission_Permission)
        /// </summary>
        public virtual Permission ParentPermission { get; set; } // FK_Permission_Permission

        public Permission()
        {
            Permissions = new System.Collections.Generic.List<Permission>();
            RolePermissions = new System.Collections.Generic.List<RolePermission>();
            UserPermissions = new System.Collections.Generic.List<UserPermission>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
