// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace DataAccess
{

    // Document
    ///<summary>
    /// جدول اسناد
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class Document
    {
        [Column(@"DocumentId", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        public int DocumentId { get; set; } // DocumentId (Primary key)

        ///<summary>
        /// عمومی، مربوط به دوره
        ///</summary>
        [Required]
        public int RootId { get; set; } // RootId

        ///<summary>
        /// فولدر، فایل
        ///</summary>
        [Required]
        public int DocumentTypeId { get; set; } // DocumentTypeId

        [Required]
        [MaxLength(100)]
        [StringLength(100)]
        public string Name { get; set; } // Name (length: 100)

        ///<summary>
        /// فیلم، عکس، مستند، ...
        ///</summary>
        [Required]
        public int ExtensionTypeId { get; set; } // ExtensionTypeId

        public string Description { get; set; } // Description

        public System.DateTime? Date { get; set; } // Date

        [Required]
        public System.DateTime RegisterDate { get; set; } // RegisterDate

        [Required]
        public string Path { get; set; } // Path

        [MaxLength(100)]
        [StringLength(100)]
        public string SaveSourcePath { get; set; } // SaveSourcePath (length: 100)

        [Required]
        public int RecordStatusId { get; set; } // RecordStatusId

        // Reverse navigation

        /// <summary>
        /// Child DocumentTags where [DocumentTag].[DocumentId] point to this entity (FK_DocumentTag_Document)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DocumentTag> DocumentTags { get; set; } // DocumentTag.FK_DocumentTag_Document

        // Foreign keys

        /// <summary>
        /// Parent GeneralBaseType pointed by [Document].([DocumentTypeId]) (FK_Document_GeneralBaseType1)
        /// </summary>
        public virtual GeneralBaseType DocumentType { get; set; } // FK_Document_GeneralBaseType1

        /// <summary>
        /// Parent GeneralBaseType pointed by [Document].([ExtensionTypeId]) (FK_Document_GeneralBaseType2)
        /// </summary>
        public virtual GeneralBaseType ExtensionType { get; set; } // FK_Document_GeneralBaseType2

        /// <summary>
        /// Parent GeneralBaseType pointed by [Document].([RecordStatusId]) (FK_Document_GeneralBaseType3)
        /// </summary>
        public virtual GeneralBaseType RecordStatus { get; set; } // FK_Document_GeneralBaseType3

        /// <summary>
        /// Parent GeneralBaseType pointed by [Document].([RootId]) (FK_Document_GeneralBaseType)
        /// </summary>
        public virtual GeneralBaseType Root { get; set; } // FK_Document_GeneralBaseType

        public Document()
        {
            DocumentTags = new System.Collections.Generic.List<DocumentTag>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
