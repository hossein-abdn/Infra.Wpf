// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace DataAccess
{

    // RollCall
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class RollCallMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RollCall>
    {
        public RollCallMap()
            : this("dbo")
        {
        }

        public RollCallMap(string schema)
        {
            ToTable("RollCall", schema);
            Property(x => x.RollCallId).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ClassSessionId).HasColumnName(@"ClassSessionId").HasColumnType("int");
            Property(x => x.StudentId).HasColumnName(@"StudentId").HasColumnType("int").IsOptional();
            Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType("int").IsOptional();
            Property(x => x.PresenceId).HasColumnName(@"PresenceId").HasColumnType("int");
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("nvarchar").IsOptional();
            Property(x => x.Delay).HasColumnName(@"Delay").HasColumnType("int").IsOptional();
            Property(x => x.RecordStatusId).HasColumnName(@"RecordStatusId").HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Parent).WithMany(b => b.RollCalls).HasForeignKey(c => c.ParentId).WillCascadeOnDelete(false); // FK_RollCall_Parent
            HasOptional(a => a.Student).WithMany(b => b.RollCalls).HasForeignKey(c => c.StudentId).WillCascadeOnDelete(false); // FK_RollCall_Student
            HasRequired(a => a.ClassSession).WithMany(b => b.RollCalls).HasForeignKey(c => c.ClassSessionId).WillCascadeOnDelete(false); // FK_RollCall_ClassSession
            HasRequired(a => a.Presence).WithMany(b => b.Presence).HasForeignKey(c => c.PresenceId).WillCascadeOnDelete(false); // FK_RollCall_GeneralBaseType
            HasRequired(a => a.RecordStatus).WithMany(b => b.RollCalls_RecordStatusId).HasForeignKey(c => c.RecordStatusId).WillCascadeOnDelete(false); // FK_RollCall_GeneralBaseType1
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
