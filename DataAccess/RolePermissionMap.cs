// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace DataAccess
{

    // RolePermission
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class RolePermissionMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RolePermission>
    {
        public RolePermissionMap()
            : this("dbo")
        {
        }

        public RolePermissionMap(string schema)
        {
            ToTable("RolePermission", schema);
            Property(x => x.RolePermissionId).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int");
            Property(x => x.PermissionId).HasColumnName(@"PermissionId").HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Permission).WithMany(b => b.RolePermissions).HasForeignKey(c => c.PermissionId).WillCascadeOnDelete(false); // FK_RolePermission_Permission
            HasRequired(a => a.Role).WithMany(b => b.RolePermissions).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // FK_RolePermission_Role
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
