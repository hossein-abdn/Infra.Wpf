// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace DebugMode
{

    // ClassSession
    ///<summary>
    /// جدول اطلاعات برگزاری جلسات کلاس
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class ClassSession
    {
        [Column(@"ClassSessionId", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Class session ID")]
        public int ClassSessionId { get; set; } // ClassSessionId (Primary key)

        [Display(Name = "Class scadule ID")]
        public int? ClassScaduleId { get; set; } // ClassScaduleId

        [Required]
        [Display(Name = "Date")]
        public System.DateTime Date { get; set; } // Date

        [Required]
        [Display(Name = "Stat time")]
        public System.TimeSpan StatTime { get; set; } // StatTime

        [Required]
        [Display(Name = "End time")]
        public System.TimeSpan EndTime { get; set; } // EndTime

        [Required]
        [Display(Name = "Holding")]
        public bool Holding { get; set; } // Holding

        [Required]
        [Display(Name = "Record status ID")]
        public int RecordStatusId { get; set; } // RecordStatusId

        // Reverse navigation

        /// <summary>
        /// Child Camps where [Camp].[ClassSessionId] point to this entity (FK_Camp_ClassSession)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Camp> Camps { get; set; } // Camp.FK_Camp_ClassSession
        /// <summary>
        /// Child Festivals where [Festival].[ClassSessionId] point to this entity (FK_Festival_ClassSession)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Festival> Festivals { get; set; } // Festival.FK_Festival_ClassSession
        /// <summary>
        /// Child ReligiousMissions where [ReligiousMission].[ClassSessionId] point to this entity (FK_ReligiousMission_ClassSession)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReligiousMission> ReligiousMissions { get; set; } // ReligiousMission.FK_ReligiousMission_ClassSession
        /// <summary>
        /// Child RollCalls where [RollCall].[ClassSessionId] point to this entity (FK_RollCall_ClassSession)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RollCall> RollCalls { get; set; } // RollCall.FK_RollCall_ClassSession

        // Foreign keys

        /// <summary>
        /// Parent ClassScadule pointed by [ClassSession].([ClassScaduleId]) (FK_ClassSession_ClassScadule)
        /// </summary>
        public virtual ClassScadule ClassScadule { get; set; } // FK_ClassSession_ClassScadule

        /// <summary>
        /// Parent GeneralBaseType pointed by [ClassSession].([RecordStatusId]) (FK_ClassSession_GeneralBaseType)
        /// </summary>
        public virtual GeneralBaseType GeneralBaseType { get; set; } // FK_ClassSession_GeneralBaseType

        public ClassSession()
        {
            Camps = new System.Collections.Generic.List<Camp>();
            Festivals = new System.Collections.Generic.List<Festival>();
            ReligiousMissions = new System.Collections.Generic.List<ReligiousMission>();
            RollCalls = new System.Collections.Generic.List<RollCall>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
