// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace DataAccess.Mappings
{
    using DataAccess.Models;

    // Class
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.29.1.0")]
    public class ClassMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Class>
    {
        public ClassMap()
            : this("dbo")
        {
        }

        public ClassMap(string schema)
        {
            ToTable("Class", schema);
            HasKey(x => x.ClassId);

            Property(x => x.ClassId).HasColumnName(@"ClassId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TermId).HasColumnName(@"TermId").HasColumnType("int").IsRequired();
            Property(x => x.GroupId).HasColumnName(@"GroupId").HasColumnType("int").IsOptional();
            Property(x => x.TeacherId).HasColumnName(@"TeacherId").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.CalcScore).HasColumnName(@"CalcScore").HasColumnType("bit").IsRequired();
            Property(x => x.ClassTypeId).HasColumnName(@"ClassTypeId").HasColumnType("int").IsRequired();
            Property(x => x.ClassModelId).HasColumnName(@"ClassModelId").HasColumnType("int").IsRequired();
            Property(x => x.RecoredStatusId).HasColumnName(@"RecoredStatusId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasOptional(a => a.Group).WithMany(b => b.Classes).HasForeignKey(c => c.GroupId).WillCascadeOnDelete(false); // FK_Class_Group
            HasRequired(a => a.ClassModel).WithMany(b => b.ClassModel).HasForeignKey(c => c.ClassModelId).WillCascadeOnDelete(false); // FK_Class_GeneralBaseType1
            HasRequired(a => a.ClassType).WithMany(b => b.ClassType).HasForeignKey(c => c.ClassTypeId).WillCascadeOnDelete(false); // FK_Class_GeneralBaseType
            HasRequired(a => a.RecoredStatus).WithMany(b => b.RecoredStatus).HasForeignKey(c => c.RecoredStatusId).WillCascadeOnDelete(false); // FK_Class_GeneralBaseType2
            HasRequired(a => a.Teacher).WithMany(b => b.Classes).HasForeignKey(c => c.TeacherId).WillCascadeOnDelete(false); // FK_Class_Teacher
            HasRequired(a => a.Term).WithMany(b => b.Classes).HasForeignKey(c => c.TermId).WillCascadeOnDelete(false); // FK_Class_Term
        }
    }

}
// </auto-generated>
