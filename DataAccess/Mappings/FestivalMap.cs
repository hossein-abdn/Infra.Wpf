// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace DataAccess.Mappings
{
    using DataAccess.Models;

    // Festival
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.29.1.0")]
    public class FestivalMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Festival>
    {
        public FestivalMap()
            : this("dbo")
        {
        }

        public FestivalMap(string schema)
        {
            ToTable("Festival", schema);
            HasKey(x => x.FestivalId);

            Property(x => x.FestivalId).HasColumnName(@"FestivalId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.ClassSessionId).HasColumnName(@"ClassSessionId").HasColumnType("int").IsRequired();
            Property(x => x.FirstPlaceId).HasColumnName(@"FirstPlaceId").HasColumnType("int").IsOptional();
            Property(x => x.SecondPlaceId).HasColumnName(@"SecondPlaceId").HasColumnType("int").IsOptional();
            Property(x => x.ThirdPlaceId).HasColumnName(@"ThirdPlaceId").HasColumnType("int").IsOptional();
            Property(x => x.RecordStatusId).HasColumnName(@"RecordStatusId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasOptional(a => a.FirstPlace).WithMany(b => b.FirstPlace).HasForeignKey(c => c.FirstPlaceId).WillCascadeOnDelete(false); // FK_Festival_Student
            HasOptional(a => a.SecondPlace).WithMany(b => b.SecondPlace).HasForeignKey(c => c.SecondPlaceId).WillCascadeOnDelete(false); // FK_Festival_Student1
            HasOptional(a => a.ThirdPlace).WithMany(b => b.ThirdPlace).HasForeignKey(c => c.ThirdPlaceId).WillCascadeOnDelete(false); // FK_Festival_Student2
            HasRequired(a => a.ClassSession).WithMany(b => b.Festivals).HasForeignKey(c => c.ClassSessionId).WillCascadeOnDelete(false); // FK_Festival_ClassSession
            HasRequired(a => a.GeneralBaseType).WithMany(b => b.Festivals).HasForeignKey(c => c.RecordStatusId).WillCascadeOnDelete(false); // FK_Festival_GeneralBaseType
        }
    }

}
// </auto-generated>
