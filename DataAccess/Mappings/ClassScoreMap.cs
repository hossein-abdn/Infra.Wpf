// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace DataAccess.Mappings
{
    using DataAccess.Models;

    // ClassScore
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.29.1.0")]
    public class ClassScoreMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ClassScore>
    {
        public ClassScoreMap()
            : this("dbo")
        {
        }

        public ClassScoreMap(string schema)
        {
            ToTable("ClassScore", schema);
            HasKey(x => x.ClassScoreId);

            Property(x => x.ClassScoreId).HasColumnName(@"ClassScoreId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ScoreTypeId).HasColumnName(@"ScoreTypeId").HasColumnType("int").IsOptional();
            Property(x => x.ClassId).HasColumnName(@"ClassId").HasColumnType("int").IsOptional();
            Property(x => x.StudentId).HasColumnName(@"StudentId").HasColumnType("int").IsOptional();
            Property(x => x.Score).HasColumnName(@"Score").HasColumnType("int").IsOptional();
            Property(x => x.RecordStatusId).HasColumnName(@"RecordStatusId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Class).WithMany(b => b.ClassScores).HasForeignKey(c => c.ClassId).WillCascadeOnDelete(false); // FK_ClassScore_Class
            HasOptional(a => a.RecordStatus).WithMany(b => b.ClassScores_RecordStatusId).HasForeignKey(c => c.RecordStatusId).WillCascadeOnDelete(false); // FK_ClassScore_GeneralBaseType1
            HasOptional(a => a.ScoreType).WithMany(b => b.ScoreType).HasForeignKey(c => c.ScoreTypeId).WillCascadeOnDelete(false); // FK_ClassScore_GeneralBaseType
            HasOptional(a => a.Student).WithMany(b => b.ClassScores).HasForeignKey(c => c.StudentId).WillCascadeOnDelete(false); // FK_ClassScore_Student
        }
    }

}
// </auto-generated>
