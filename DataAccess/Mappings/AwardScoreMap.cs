// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace DataAccess.Mappings
{
    using DataAccess.Models;

    // AwardScore
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.29.1.0")]
    public class AwardScoreMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AwardScore>
    {
        public AwardScoreMap()
            : this("dbo")
        {
        }

        public AwardScoreMap(string schema)
        {
            ToTable("AwardScore", schema);
            HasKey(x => x.AwardScoreId);

            Property(x => x.AwardScoreId).HasColumnName(@"AwardScoreId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AwardId).HasColumnName(@"AwardId").HasColumnType("int").IsRequired();
            Property(x => x.Score).HasColumnName(@"Score").HasColumnType("int").IsRequired();
            Property(x => x.TermId).HasColumnName(@"TermId").HasColumnType("int").IsRequired();
            Property(x => x.RecordStatusId).HasColumnName(@"RecordStatusId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Award).WithMany(b => b.AwardScores).HasForeignKey(c => c.AwardId).WillCascadeOnDelete(false); // FK_AwardScore_Award
            HasRequired(a => a.GeneralBaseType).WithMany(b => b.AwardScores).HasForeignKey(c => c.RecordStatusId).WillCascadeOnDelete(false); // FK_AwardScore_GeneralBaseType
            HasRequired(a => a.Term).WithMany(b => b.AwardScores).HasForeignKey(c => c.TermId).WillCascadeOnDelete(false); // FK_AwardScore_Term
        }
    }

}
// </auto-generated>
