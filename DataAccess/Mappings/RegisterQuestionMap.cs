// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace DataAccess.Mappings
{
    using DataAccess.Models;

    // RegisterQuestion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.29.1.0")]
    public class RegisterQuestionMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RegisterQuestion>
    {
        public RegisterQuestionMap()
            : this("dbo")
        {
        }

        public RegisterQuestionMap(string schema)
        {
            ToTable("RegisterQuestion", schema);
            HasKey(x => x.RegisterQuestionId);

            Property(x => x.RegisterQuestionId).HasColumnName(@"RegisterQuestionId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RegisterId).HasColumnName(@"RegisterId").HasColumnType("int").IsRequired();
            Property(x => x.TermQuestionId).HasColumnName(@"TermQuestionId").HasColumnType("int").IsRequired();
            Property(x => x.QuestionItemId).HasColumnName(@"QuestionItemId").HasColumnType("int").IsRequired();
            Property(x => x.AnswerItem).HasColumnName(@"AnswerItem").HasColumnType("bit").IsOptional();
            Property(x => x.AnswerText).HasColumnName(@"AnswerText").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.RecordStatusId).HasColumnName(@"RecordStatusId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.GeneralBaseType).WithMany(b => b.RegisterQuestions).HasForeignKey(c => c.RecordStatusId).WillCascadeOnDelete(false); // FK_RegisterQuestion_GeneralBaseType
            HasRequired(a => a.QuestionItem).WithMany(b => b.RegisterQuestions).HasForeignKey(c => c.QuestionItemId).WillCascadeOnDelete(false); // FK_RegisterQuestion_QuestionItem
            HasRequired(a => a.Register).WithMany(b => b.RegisterQuestions).HasForeignKey(c => c.RegisterId).WillCascadeOnDelete(false); // FK_RegisterQuestion_Register
            HasRequired(a => a.TermQuestion).WithMany(b => b.RegisterQuestions).HasForeignKey(c => c.TermQuestionId).WillCascadeOnDelete(false); // FK_RegisterQuestion_TermQuestion
        }
    }

}
// </auto-generated>
