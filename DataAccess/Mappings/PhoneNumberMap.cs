// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace DataAccess.Mappings
{
    using DataAccess.Models;

    // PhoneNumber
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.29.1.0")]
    public class PhoneNumberMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PhoneNumber>
    {
        public PhoneNumberMap()
            : this("dbo")
        {
        }

        public PhoneNumberMap(string schema)
        {
            ToTable("PhoneNumber", schema);
            HasKey(x => x.PhoneNumberId);

            Property(x => x.PhoneNumberId).HasColumnName(@"PhoneNumberId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.StudentId).HasColumnName(@"StudentId").HasColumnType("int").IsOptional();
            Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType("int").IsOptional();
            Property(x => x.TeacherId).HasColumnName(@"TeacherId").HasColumnType("int").IsOptional();
            Property(x => x.OwnerId).HasColumnName(@"OwnerId").HasColumnType("int").IsRequired();
            Property(x => x.PhoneNumber_).HasColumnName(@"PhoneNumber").HasColumnType("int").IsRequired();
            Property(x => x.PhoneNumberTypeId).HasColumnName(@"PhoneNumberTypeId").HasColumnType("int").IsRequired();
            Property(x => x.RecordStatusId).HasColumnName(@"RecordStatusId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasOptional(a => a.Parent).WithMany(b => b.PhoneNumbers).HasForeignKey(c => c.ParentId).WillCascadeOnDelete(false); // FK_PhoneNumber_Parent
            HasOptional(a => a.Student).WithMany(b => b.PhoneNumbers).HasForeignKey(c => c.StudentId).WillCascadeOnDelete(false); // FK_PhoneNumber_Student
            HasOptional(a => a.Teacher).WithMany(b => b.PhoneNumbers).HasForeignKey(c => c.TeacherId).WillCascadeOnDelete(false); // FK_PhoneNumber_Teacher
            HasRequired(a => a.Owner).WithMany(b => b.Owner).HasForeignKey(c => c.OwnerId).WillCascadeOnDelete(false); // FK_PhoneNumber_GeneralBaseType
            HasRequired(a => a.PhoneNumberType).WithMany(b => b.PhoneNumberType).HasForeignKey(c => c.PhoneNumberTypeId).WillCascadeOnDelete(false); // FK_PhoneNumber_GeneralBaseType1
            HasRequired(a => a.RecordStatus).WithMany(b => b.PhoneNumbers_RecordStatusId).HasForeignKey(c => c.RecordStatusId).WillCascadeOnDelete(false); // FK_PhoneNumber_GeneralBaseType2
        }
    }

}
// </auto-generated>
