// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace DataAccess.Mappings
{
    using DataAccess.Models;

    // ClassScadule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.29.1.0")]
    public class ClassScaduleMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ClassScadule>
    {
        public ClassScaduleMap()
            : this("dbo")
        {
        }

        public ClassScaduleMap(string schema)
        {
            ToTable("ClassScadule", schema);
            HasKey(x => x.ClassScaduleId);

            Property(x => x.ClassScaduleId).HasColumnName(@"ClassScaduleId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ClassId).HasColumnName(@"ClassId").HasColumnType("int").IsRequired();
            Property(x => x.ScaduleTypeId).HasColumnName(@"ScaduleTypeId").HasColumnType("int").IsRequired();
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("date").IsOptional();
            Property(x => x.DayId).HasColumnName(@"DayId").HasColumnType("int").IsOptional();
            Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("time").IsRequired();
            Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("time").IsRequired();
            Property(x => x.RecordStatusId).HasColumnName(@"RecordStatusId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Class).WithMany(b => b.ClassScadules).HasForeignKey(c => c.ClassId).WillCascadeOnDelete(false); // FK_ClassScadule_Class
            HasRequired(a => a.RecordStatus).WithMany(b => b.ClassScadules_RecordStatusId).HasForeignKey(c => c.RecordStatusId).WillCascadeOnDelete(false); // FK_ClassScadule_GeneralBaseType1
            HasRequired(a => a.ScaduleType).WithMany(b => b.ScaduleType).HasForeignKey(c => c.ScaduleTypeId).WillCascadeOnDelete(false); // FK_ClassScadule_GeneralBaseType
        }
    }

}
// </auto-generated>
